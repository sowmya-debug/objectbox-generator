// Code generated by ObjectBox; DO NOT EDIT.

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type taskRelEmbedded_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var TaskRelEmbeddedBinding = taskRelEmbedded_EntityInfo{
	Id:  4,
	Uid: 7837839688282259259,
}

// TaskRelEmbedded_ contains type-based Property helpers to facilitate some common operations such as Queries.
var TaskRelEmbedded_ = struct {
	Id    *objectbox.PropertyUint64
	Group *objectbox.PropertyUint64
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 4,
			},
		},
	},
	Group: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 2,
			Entity: &objectbox.Entity{
				Id: 4,
			},
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (taskRelEmbedded_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by ObjectBox during model build
func (taskRelEmbedded_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("TaskRelEmbedded", 4, 7837839688282259259)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2518412263346885298)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Group", objectbox.PropertyType_Relation, 2, 5617773211005988520)
	model.PropertyRelation("Group", 4, 2339563716805116249)
	model.EntityLastPropertyId(2, 5617773211005988520)
	model.Relation(3, 6392442863481646880, GroupBinding.Id, GroupBinding.Uid)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (taskRelEmbedded_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*TaskRelEmbedded).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (taskRelEmbedded_EntityInfo) SetId(object interface{}, id uint64) {
	object.(*TaskRelEmbedded).Id = id
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (taskRelEmbedded_EntityInfo) PutRelated(txn *objectbox.Transaction, object interface{}, id uint64) error {
	if rel := object.(*TaskRelEmbedded).Group; rel != nil {
		rId, err := GroupBinding.GetId(rel)
		if err != nil {
			return err
		} else if rId == 0 {
			if err := txn.RunWithCursor(GroupBinding.Id, func(targetCursor *objectbox.Cursor) error {
				_, err := targetCursor.Put(rel) // NOTE Put/PutAsync() has a side-effect of setting the rel.ID
				return err
			}); err != nil {
				return err
			}
		}
	}
	if err := txn.RunWithCursor(TaskRelEmbeddedBinding.Id, func(cursor *objectbox.Cursor) error {
		return cursor.RelationReplace(3, GroupBinding.Id, id, object, object.(*TaskRelEmbedded).GroupsNew)
	}); err != nil {
		return err
	}
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (taskRelEmbedded_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {
	obj := object.(*TaskRelEmbedded)

	var rIdGroup uint64
	if rel := obj.Group; rel != nil {
		if rId, err := GroupBinding.GetId(rel); err != nil {
			panic(err) // this must never happen but let's keep the check just to be sure
		} else {
			rIdGroup = rId
		}
	}

	// build the FlatBuffers object
	fbb.StartObject(2)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetUint64Slot(fbb, 1, rIdGroup)
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (taskRelEmbedded_EntityInfo) Load(txn *objectbox.Transaction, bytes []byte) interface{} {
	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = table.GetUint64Slot(4, 0)

	var relGroup *Group
	if rId := table.GetUint64Slot(6, 0); rId > 0 {
		if err := txn.RunWithCursor(GroupBinding.Id, func(targetCursor *objectbox.Cursor) error {
			if relObject, err := targetCursor.Get(rId); err != nil {
				return err
			} else if relObj, ok := relObject.(*Group); ok {
				relGroup = relObj
			} else {
				var relObj = relObject.(Group)
				relGroup = &relObj
			}
			return nil
		}); err != nil {
			panic(err)
		}
	}

	var relGroupsNew []*Group
	if err := txn.RunWithCursor(TaskRelEmbeddedBinding.Id, func(cursor *objectbox.Cursor) error {
		if rSlice, err := cursor.RelationGetAll(3, GroupBinding.Id, id); err != nil {
			return err
		} else {
			relGroupsNew = rSlice.([]*Group)
			return nil
		}
	}); err != nil {
		panic(err)
	}

	return &TaskRelEmbedded{
		Id: id,
		WithGroup: WithGroup{
			Group:     relGroup,
			GroupsNew: relGroupsNew,
		},
	}
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (taskRelEmbedded_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*TaskRelEmbedded, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (taskRelEmbedded_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*TaskRelEmbedded), object.(*TaskRelEmbedded))
}

// Box provides CRUD access to TaskRelEmbedded objects
type TaskRelEmbeddedBox struct {
	*objectbox.Box
}

// BoxForTaskRelEmbedded opens a box of TaskRelEmbedded objects
func BoxForTaskRelEmbedded(ob *objectbox.ObjectBox) *TaskRelEmbeddedBox {
	return &TaskRelEmbeddedBox{
		Box: ob.InternalBox(4),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the TaskRelEmbedded.Id property on the passed object will be assigned the new ID as well.
func (box *TaskRelEmbeddedBox) Put(object *TaskRelEmbedded) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the TaskRelEmbedded.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *TaskRelEmbeddedBox) PutAsync(object *TaskRelEmbedded) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the TaskRelEmbedded.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the TaskRelEmbedded.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *TaskRelEmbeddedBox) PutAll(objects []*TaskRelEmbedded) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *TaskRelEmbeddedBox) Get(id uint64) (*TaskRelEmbedded, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*TaskRelEmbedded), nil
}

// Get reads all stored objects
func (box *TaskRelEmbeddedBox) GetAll() ([]*TaskRelEmbedded, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*TaskRelEmbedded), nil
}

// Remove deletes a single object
func (box *TaskRelEmbeddedBox) Remove(object *TaskRelEmbedded) (err error) {
	return box.Box.Remove(object.Id)
}

// Creates a query with the given conditions. Use the fields of the TaskRelEmbedded_ struct to create conditions.
// Keep the *TaskRelEmbeddedQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *TaskRelEmbeddedBox) Query(conditions ...objectbox.Condition) *TaskRelEmbeddedQuery {
	return &TaskRelEmbeddedQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the TaskRelEmbedded_ struct to create conditions.
// Keep the *TaskRelEmbeddedQuery if you intend to execute the query multiple times.
func (box *TaskRelEmbeddedBox) QueryOrError(conditions ...objectbox.Condition) (*TaskRelEmbeddedQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &TaskRelEmbeddedQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all TaskRelEmbedded which Id is either 42 or 47:
// 		box.Query(TaskRelEmbedded_.Id.In(42, 47)).Find()
type TaskRelEmbeddedQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *TaskRelEmbeddedQuery) Find() ([]*TaskRelEmbedded, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*TaskRelEmbedded), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *TaskRelEmbeddedQuery) Offset(offset uint64) *TaskRelEmbeddedQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *TaskRelEmbeddedQuery) Limit(limit uint64) *TaskRelEmbeddedQuery {
	query.Query.Limit(limit)
	return query
}
