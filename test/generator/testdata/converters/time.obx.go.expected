// Code generated by ObjectBox; DO NOT EDIT.
// Learn more about defining entities and generating this file - visit https://golang.objectbox.io/entity-annotations

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type timeEntity_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var TimeEntityBinding = timeEntity_EntityInfo{
	Entity: objectbox.Entity{
		Id: 3,
	},
	Uid: 3390393562759376202,
}

// TimeEntity_ contains type-based Property helpers to facilitate some common operations such as Queries.
var TimeEntity_ = struct {
	Id   *objectbox.PropertyUint64
	Time *objectbox.PropertyInt64
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &TimeEntityBinding.Entity,
		},
	},
	Time: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &TimeEntityBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (timeEntity_EntityInfo) GeneratorVersion() int {
	return 2
}

// AddToModel is called by ObjectBox during model build
func (timeEntity_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("TimeEntity", 3, 3390393562759376202)
	model.Property("Id", 6, 1, 2669985732393126063)
	model.PropertyFlags(8193)
	model.Property("Time", 10, 2, 1774932891286980153)
	model.EntityLastPropertyId(2, 1774932891286980153)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (timeEntity_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*TimeEntity).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (timeEntity_EntityInfo) SetId(object interface{}, id uint64) {
	object.(*TimeEntity).Id = id
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (timeEntity_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (timeEntity_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*TimeEntity)

	// build the FlatBuffers object
	fbb.StartObject(2)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetInt64Slot(fbb, 1, timeInt64ToDatabaseValue(obj.Time))
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (timeEntity_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = table.GetUint64Slot(4, 0)

	return &TimeEntity{
		Id:   id,
		Time: timeInt64ToEntityProperty(fbutils.GetInt64Slot(table, 6)),
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (timeEntity_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*TimeEntity, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (timeEntity_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*TimeEntity), object.(*TimeEntity))
}

// Box provides CRUD access to TimeEntity objects
type TimeEntityBox struct {
	*objectbox.Box
}

// BoxForTimeEntity opens a box of TimeEntity objects
func BoxForTimeEntity(ob *objectbox.ObjectBox) *TimeEntityBox {
	return &TimeEntityBox{
		Box: ob.InternalBox(3),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the TimeEntity.Id property on the passed object will be assigned the new ID as well.
func (box *TimeEntityBox) Put(object *TimeEntity) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the TimeEntity.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *TimeEntityBox) PutAsync(object *TimeEntity) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the TimeEntity.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the TimeEntity.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *TimeEntityBox) PutAll(objects []*TimeEntity) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *TimeEntityBox) Get(id uint64) (*TimeEntity, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*TimeEntity), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *TimeEntityBox) GetMany(ids ...uint64) ([]*TimeEntity, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*TimeEntity), nil
}

// GetAll reads all stored objects
func (box *TimeEntityBox) GetAll() ([]*TimeEntity, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*TimeEntity), nil
}

// Remove deletes a single object
func (box *TimeEntityBox) Remove(object *TimeEntity) (err error) {
	return box.Box.Remove(object.Id)
}

// Creates a query with the given conditions. Use the fields of the TimeEntity_ struct to create conditions.
// Keep the *TimeEntityQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *TimeEntityBox) Query(conditions ...objectbox.Condition) *TimeEntityQuery {
	return &TimeEntityQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the TimeEntity_ struct to create conditions.
// Keep the *TimeEntityQuery if you intend to execute the query multiple times.
func (box *TimeEntityBox) QueryOrError(conditions ...objectbox.Condition) (*TimeEntityQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &TimeEntityQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all TimeEntity which Id is either 42 or 47:
// 		box.Query(TimeEntity_.Id.In(42, 47)).Find()
type TimeEntityQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *TimeEntityQuery) Find() ([]*TimeEntity, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*TimeEntity), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *TimeEntityQuery) Offset(offset uint64) *TimeEntityQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *TimeEntityQuery) Limit(limit uint64) *TimeEntityQuery {
	query.Query.Limit(limit)
	return query
}
