// Code generated by ObjectBox; DO NOT EDIT.

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type runeIdEntity_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var RuneIdEntityBinding = runeIdEntity_EntityInfo{
	Id:  1,
	Uid: 8717895732742165505,
}

// RuneIdEntity_ contains type-based Property helpers to facilitate some common operations such as Queries.
var RuneIdEntity_ = struct {
	Id *objectbox.PropertyUint64
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (runeIdEntity_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by ObjectBox during model build
func (runeIdEntity_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("RuneIdEntity", 1, 8717895732742165505)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2259404117704393152)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.EntityLastPropertyId(1, 2259404117704393152)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (runeIdEntity_EntityInfo) GetId(object interface{}) (uint64, error) {
	return runeIdToDatabaseValue(object.(*RuneIdEntity).Id), nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (runeIdEntity_EntityInfo) SetId(object interface{}, id uint64) {
	object.(*RuneIdEntity).Id = runeIdToEntityProperty(id)
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (runeIdEntity_EntityInfo) PutRelated(txn *objectbox.Transaction, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (runeIdEntity_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {

	// build the FlatBuffers object
	fbb.StartObject(1)
	fbutils.SetUint64Slot(fbb, 0, id)
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (runeIdEntity_EntityInfo) Load(txn *objectbox.Transaction, bytes []byte) interface{} {
	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = table.GetUint64Slot(4, 0)

	return &RuneIdEntity{
		Id: runeIdToEntityProperty(id),
	}
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (runeIdEntity_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*RuneIdEntity, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (runeIdEntity_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*RuneIdEntity), object.(*RuneIdEntity))
}

// Box provides CRUD access to RuneIdEntity objects
type RuneIdEntityBox struct {
	*objectbox.Box
}

// BoxForRuneIdEntity opens a box of RuneIdEntity objects
func BoxForRuneIdEntity(ob *objectbox.ObjectBox) *RuneIdEntityBox {
	return &RuneIdEntityBox{
		Box: ob.InternalBox(1),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the RuneIdEntity.Id property on the passed object will be assigned the new ID as well.
func (box *RuneIdEntityBox) Put(object *RuneIdEntity) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the RuneIdEntity.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *RuneIdEntityBox) PutAsync(object *RuneIdEntity) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the RuneIdEntity.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the RuneIdEntity.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *RuneIdEntityBox) PutAll(objects []*RuneIdEntity) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *RuneIdEntityBox) Get(id uint64) (*RuneIdEntity, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*RuneIdEntity), nil
}

// Get reads all stored objects
func (box *RuneIdEntityBox) GetAll() ([]*RuneIdEntity, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*RuneIdEntity), nil
}

// Remove deletes a single object
func (box *RuneIdEntityBox) Remove(object *RuneIdEntity) (err error) {
	return box.Box.Remove(runeIdToDatabaseValue(object.Id))
}

// Creates a query with the given conditions. Use the fields of the RuneIdEntity_ struct to create conditions.
// Keep the *RuneIdEntityQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *RuneIdEntityBox) Query(conditions ...objectbox.Condition) *RuneIdEntityQuery {
	return &RuneIdEntityQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the RuneIdEntity_ struct to create conditions.
// Keep the *RuneIdEntityQuery if you intend to execute the query multiple times.
func (box *RuneIdEntityBox) QueryOrError(conditions ...objectbox.Condition) (*RuneIdEntityQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &RuneIdEntityQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all RuneIdEntity which Id is either 42 or 47:
// 		box.Query(RuneIdEntity_.Id.In(42, 47)).Find()
type RuneIdEntityQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *RuneIdEntityQuery) Find() ([]*RuneIdEntity, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*RuneIdEntity), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *RuneIdEntityQuery) Offset(offset uint64) *RuneIdEntityQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *RuneIdEntityQuery) Limit(limit uint64) *RuneIdEntityQuery {
	query.Query.Limit(limit)
	return query
}
