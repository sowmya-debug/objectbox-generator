// This file was automatically generated by ObjectBox, do not modify

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type task_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var TaskBinding = task_EntityInfo{
	Id:  1,
	Uid: 8717895732742165505,
}

var Task_ = struct {
	Id      objectbox.TypeId
	Uid     objectbox.TypeId
	Name    objectbox.TypeId
	Place   objectbox.TypeId
	Source  objectbox.TypeId
	Text    objectbox.TypeId
	Date    objectbox.TypeId
	GroupId objectbox.TypeId
}{
	Id:      1,
	Uid:     2,
	Name:    3,
	Place:   4,
	Source:  5,
	Text:    6,
	Date:    7,
	GroupId: 8,
}

func (task_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Task", 1, 8717895732742165505)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2259404117704393152)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Uid", objectbox.PropertyType_String, 2, 6050128673802995827)
	model.PropertyFlags(objectbox.PropertyFlags_UNIQUE)
	model.PropertyIndex(1, 501233450539197794)
	model.Property("Name", objectbox.PropertyType_String, 3, 3390393562759376202)
	model.Property("Place", objectbox.PropertyType_String, 4, 2669985732393126063)
	model.PropertyFlags(objectbox.PropertyFlags_INDEXED | objectbox.PropertyFlags_INDEX_HASH)
	model.PropertyIndex(2, 1774932891286980153)
	model.Property("Source", objectbox.PropertyType_String, 5, 6044372234677422456)
	model.PropertyFlags(objectbox.PropertyFlags_INDEXED | objectbox.PropertyFlags_INDEX_HASH64)
	model.PropertyIndex(3, 8274930044578894929)
	model.Property("text", objectbox.PropertyType_String, 6, 1543572285742637646)
	model.Property("Date", objectbox.PropertyType_Date, 7, 2661732831099943416)
	model.Property("GroupId", objectbox.PropertyType_Relation, 8, 8325060299420976708)
	model.PropertyRelation("Group", 4, 7837839688282259259)
	model.EntityLastPropertyId(8, 8325060299420976708)
}

func (task_EntityInfo) GetId(entity interface{}) (uint64, error) {
	return entity.(*Task).Id, nil
}

func (task_EntityInfo) Flatten(entity interface{}, fbb *flatbuffers.Builder, id uint64) {
	ent := entity.(*Task)
	var offsetUid = fbutils.CreateStringOffset(fbb, ent.Uid)
	var offsetName = fbutils.CreateStringOffset(fbb, ent.Name)
	var offsetPlace = fbutils.CreateStringOffset(fbb, ent.Place)
	var offsetSource = fbutils.CreateStringOffset(fbb, ent.Source)
	var offsetText = fbutils.CreateStringOffset(fbb, ent.Text)

	// build the FlatBuffers object
	fbb.StartObject(8)
	fbb.PrependUint64Slot(0, id, 0)
	fbb.PrependUOffsetTSlot(1, offsetUid, 0)
	fbb.PrependUOffsetTSlot(2, offsetName, 0)
	fbb.PrependUOffsetTSlot(3, offsetPlace, 0)
	fbb.PrependUOffsetTSlot(4, offsetSource, 0)
	fbb.PrependUOffsetTSlot(5, offsetText, 0)
	fbb.PrependUint64Slot(6, ent.Date, 0)
	fbb.PrependUint64Slot(7, ent.GroupId, 0)
}

func (task_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &Task{
		Id:      table.GetUint64Slot(4, 0),
		Uid:     fbutils.GetStringSlot(table, 6),
		Name:    fbutils.GetStringSlot(table, 8),
		Place:   fbutils.GetStringSlot(table, 10),
		Source:  fbutils.GetStringSlot(table, 12),
		Text:    fbutils.GetStringSlot(table, 14),
		Date:    table.GetUint64Slot(16, 0),
		GroupId: table.GetUint64Slot(18, 0),
	}
}

func (task_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*Task, 0, capacity)
}

func (task_EntityInfo) AppendToSlice(slice interface{}, entity interface{}) interface{} {
	return append(slice.([]*Task), entity.(*Task))
}

type TaskBox struct {
	*objectbox.Box
}

func BoxForTask(ob *objectbox.ObjectBox) *TaskBox {
	return &TaskBox{
		Box: ob.Box(1),
	}
}

func (box *TaskBox) Get(id uint64) (*Task, error) {
	entity, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if entity == nil {
		return nil, nil
	}
	return entity.(*Task), nil
}

func (box *TaskBox) GetAll() ([]*Task, error) {
	entities, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return entities.([]*Task), nil
}

func (box *TaskBox) Remove(entity *Task) (err error) {
	return box.Box.Remove(entity.Id)
}

type group_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var GroupBinding = group_EntityInfo{
	Id:  2,
	Uid: 2518412263346885298,
}

var Group_ = struct {
	Id objectbox.TypeId
}{
	Id: 1,
}

func (group_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Group", 2, 2518412263346885298)
	model.Property("Id", objectbox.PropertyType_Long, 1, 5617773211005988520)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.EntityLastPropertyId(1, 5617773211005988520)
}

func (group_EntityInfo) GetId(entity interface{}) (uint64, error) {
	return entity.(*Group).Id, nil
}

func (group_EntityInfo) Flatten(entity interface{}, fbb *flatbuffers.Builder, id uint64) {

	// build the FlatBuffers object
	fbb.StartObject(1)
	fbb.PrependUint64Slot(0, id, 0)
}

func (group_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &Group{
		Id: table.GetUint64Slot(4, 0),
	}
}

func (group_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*Group, 0, capacity)
}

func (group_EntityInfo) AppendToSlice(slice interface{}, entity interface{}) interface{} {
	return append(slice.([]*Group), entity.(*Group))
}

type GroupBox struct {
	*objectbox.Box
}

func BoxForGroup(ob *objectbox.ObjectBox) *GroupBox {
	return &GroupBox{
		Box: ob.Box(2),
	}
}

func (box *GroupBox) Get(id uint64) (*Group, error) {
	entity, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if entity == nil {
		return nil, nil
	}
	return entity.(*Group), nil
}

func (box *GroupBox) GetAll() ([]*Group, error) {
	entities, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return entities.([]*Group), nil
}

func (box *GroupBox) Remove(entity *Group) (err error) {
	return box.Box.Remove(entity.Id)
}
