// Code generated by ObjectBox; DO NOT EDIT.

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type taskByValue_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var TaskByValueBinding = taskByValue_EntityInfo{
	Id:  3,
	Uid: 2661732831099943416,
}

// TaskByValue_ contains type-based Property helpers to facilitate some common operations such as Queries.
var TaskByValue_ = struct {
	Id *objectbox.PropertyUint64
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 3,
			},
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (taskByValue_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by ObjectBox during model build
func (taskByValue_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("TaskByValue", 3, 2661732831099943416)
	model.Property("Id", objectbox.PropertyType_Long, 1, 8325060299420976708)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.EntityLastPropertyId(1, 8325060299420976708)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (taskByValue_EntityInfo) GetId(object interface{}) (uint64, error) {
	if obj, ok := object.(*TaskByValue); ok {
		return obj.Id, nil
	} else {
		return object.(TaskByValue).Id, nil
	}
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (taskByValue_EntityInfo) SetId(object interface{}, id uint64) {
	if obj, ok := object.(*TaskByValue); ok {
		obj.Id = id
	} else {
		// NOTE while this can't update, it will at least behave consistently (panic in case of a wrong type)
		_ = object.(TaskByValue).Id
	}
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (taskByValue_EntityInfo) PutRelated(txn *objectbox.Transaction, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (taskByValue_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {

	// build the FlatBuffers object
	fbb.StartObject(1)
	fbutils.SetUint64Slot(fbb, 0, id)
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (taskByValue_EntityInfo) Load(txn *objectbox.Transaction, bytes []byte) interface{} {
	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = table.GetUint64Slot(4, 0)

	return &TaskByValue{
		Id: id,
	}
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (taskByValue_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]TaskByValue, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (taskByValue_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]TaskByValue), *object.(*TaskByValue))
}

// Box provides CRUD access to TaskByValue objects
type TaskByValueBox struct {
	*objectbox.Box
}

// BoxForTaskByValue opens a box of TaskByValue objects
func BoxForTaskByValue(ob *objectbox.ObjectBox) *TaskByValueBox {
	return &TaskByValueBox{
		Box: ob.InternalBox(3),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the TaskByValue.Id property on the passed object will be assigned the new ID as well.
func (box *TaskByValueBox) Put(object *TaskByValue) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the TaskByValue.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *TaskByValueBox) PutAsync(object *TaskByValue) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the TaskByValue.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the TaskByValue.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *TaskByValueBox) PutAll(objects []TaskByValue) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *TaskByValueBox) Get(id uint64) (*TaskByValue, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*TaskByValue), nil
}

// Get reads all stored objects
func (box *TaskByValueBox) GetAll() ([]TaskByValue, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]TaskByValue), nil
}

// Remove deletes a single object
func (box *TaskByValueBox) Remove(object *TaskByValue) (err error) {
	return box.Box.Remove(object.Id)
}

// Creates a query with the given conditions. Use the fields of the TaskByValue_ struct to create conditions.
// Keep the *TaskByValueQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *TaskByValueBox) Query(conditions ...objectbox.Condition) *TaskByValueQuery {
	return &TaskByValueQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the TaskByValue_ struct to create conditions.
// Keep the *TaskByValueQuery if you intend to execute the query multiple times.
func (box *TaskByValueBox) QueryOrError(conditions ...objectbox.Condition) (*TaskByValueQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &TaskByValueQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all TaskByValue which Id is either 42 or 47:
// 		box.Query(TaskByValue_.Id.In(42, 47)).Find()
type TaskByValueQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *TaskByValueQuery) Find() ([]TaskByValue, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]TaskByValue), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *TaskByValueQuery) Offset(offset uint64) *TaskByValueQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *TaskByValueQuery) Limit(limit uint64) *TaskByValueQuery {
	query.Query.Limit(limit)
	return query
}

type taskStringByValue_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var TaskStringByValueBinding = taskStringByValue_EntityInfo{
	Id:  4,
	Uid: 7837839688282259259,
}

// TaskStringByValue_ contains type-based Property helpers to facilitate some common operations such as Queries.
var TaskStringByValue_ = struct {
	Id *objectbox.PropertyUint64
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 4,
			},
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (taskStringByValue_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by ObjectBox during model build
func (taskStringByValue_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("TaskStringByValue", 4, 7837839688282259259)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2518412263346885298)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.EntityLastPropertyId(1, 2518412263346885298)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (taskStringByValue_EntityInfo) GetId(object interface{}) (uint64, error) {
	if obj, ok := object.(*TaskStringByValue); ok {
		return objectbox.StringIdConvertToDatabaseValue(obj.Id), nil
	} else {
		return objectbox.StringIdConvertToDatabaseValue(object.(TaskStringByValue).Id), nil
	}
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (taskStringByValue_EntityInfo) SetId(object interface{}, id uint64) {
	if obj, ok := object.(*TaskStringByValue); ok {
		obj.Id = objectbox.StringIdConvertToEntityProperty(id)
	} else {
		// NOTE while this can't update, it will at least behave consistently (panic in case of a wrong type)
		_ = object.(TaskStringByValue).Id
	}
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (taskStringByValue_EntityInfo) PutRelated(txn *objectbox.Transaction, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (taskStringByValue_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {

	// build the FlatBuffers object
	fbb.StartObject(1)
	fbutils.SetUint64Slot(fbb, 0, id)
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (taskStringByValue_EntityInfo) Load(txn *objectbox.Transaction, bytes []byte) interface{} {
	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = table.GetUint64Slot(4, 0)

	return &TaskStringByValue{
		Id: objectbox.StringIdConvertToEntityProperty(id),
	}
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (taskStringByValue_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]TaskStringByValue, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (taskStringByValue_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]TaskStringByValue), *object.(*TaskStringByValue))
}

// Box provides CRUD access to TaskStringByValue objects
type TaskStringByValueBox struct {
	*objectbox.Box
}

// BoxForTaskStringByValue opens a box of TaskStringByValue objects
func BoxForTaskStringByValue(ob *objectbox.ObjectBox) *TaskStringByValueBox {
	return &TaskStringByValueBox{
		Box: ob.InternalBox(4),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the TaskStringByValue.Id property on the passed object will be assigned the new ID as well.
func (box *TaskStringByValueBox) Put(object *TaskStringByValue) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the TaskStringByValue.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *TaskStringByValueBox) PutAsync(object *TaskStringByValue) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the TaskStringByValue.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the TaskStringByValue.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *TaskStringByValueBox) PutAll(objects []TaskStringByValue) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *TaskStringByValueBox) Get(id uint64) (*TaskStringByValue, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*TaskStringByValue), nil
}

// Get reads all stored objects
func (box *TaskStringByValueBox) GetAll() ([]TaskStringByValue, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]TaskStringByValue), nil
}

// Remove deletes a single object
func (box *TaskStringByValueBox) Remove(object *TaskStringByValue) (err error) {
	return box.Box.Remove(objectbox.StringIdConvertToDatabaseValue(object.Id))
}

// Creates a query with the given conditions. Use the fields of the TaskStringByValue_ struct to create conditions.
// Keep the *TaskStringByValueQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *TaskStringByValueBox) Query(conditions ...objectbox.Condition) *TaskStringByValueQuery {
	return &TaskStringByValueQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the TaskStringByValue_ struct to create conditions.
// Keep the *TaskStringByValueQuery if you intend to execute the query multiple times.
func (box *TaskStringByValueBox) QueryOrError(conditions ...objectbox.Condition) (*TaskStringByValueQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &TaskStringByValueQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all TaskStringByValue which Id is either 42 or 47:
// 		box.Query(TaskStringByValue_.Id.In(42, 47)).Find()
type TaskStringByValueQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *TaskStringByValueQuery) Find() ([]TaskStringByValue, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]TaskStringByValue), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *TaskStringByValueQuery) Offset(offset uint64) *TaskStringByValueQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *TaskStringByValueQuery) Limit(limit uint64) *TaskStringByValueQuery {
	query.Query.Limit(limit)
	return query
}
