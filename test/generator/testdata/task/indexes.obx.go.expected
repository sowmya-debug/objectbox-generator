// Code generated by ObjectBox; DO NOT EDIT.

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type taskIndexed_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var TaskIndexedBinding = taskIndexed_EntityInfo{
	Id:  5,
	Uid: 5617773211005988520,
}

// TaskIndexed_ contains type-based Property helpers to facilitate some common operations such as Queries.
var TaskIndexed_ = struct {
	Id       *objectbox.PropertyUint64
	Uid      *objectbox.PropertyString
	Name     *objectbox.PropertyString
	Priority *objectbox.PropertyInt
	Group    *objectbox.PropertyString
	Place    *objectbox.PropertyString
	Source   *objectbox.PropertyString
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 5,
			},
		},
	},
	Uid: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 2,
			Entity: &objectbox.Entity{
				Id: 5,
			},
		},
	},
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 3,
			Entity: &objectbox.Entity{
				Id: 5,
			},
		},
	},
	Priority: &objectbox.PropertyInt{
		BaseProperty: &objectbox.BaseProperty{
			Id: 4,
			Entity: &objectbox.Entity{
				Id: 5,
			},
		},
	},
	Group: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 5,
			Entity: &objectbox.Entity{
				Id: 5,
			},
		},
	},
	Place: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 6,
			Entity: &objectbox.Entity{
				Id: 5,
			},
		},
	},
	Source: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 7,
			Entity: &objectbox.Entity{
				Id: 5,
			},
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (taskIndexed_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by ObjectBox during model build
func (taskIndexed_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("TaskIndexed", 5, 5617773211005988520)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2339563716805116249)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Uid", objectbox.PropertyType_String, 2, 7144924247938981575)
	model.PropertyFlags(objectbox.PropertyFlags_UNIQUE)
	model.PropertyIndex(3, 161231572858529631)
	model.Property("Name", objectbox.PropertyType_String, 3, 7259475919510918339)
	model.PropertyFlags(objectbox.PropertyFlags_INDEX_HASH)
	model.PropertyIndex(4, 7373105480197164748)
	model.Property("Priority", objectbox.PropertyType_Long, 4, 3287288577352441706)
	model.PropertyFlags(objectbox.PropertyFlags_INDEXED)
	model.PropertyIndex(5, 3930927879439176946)
	model.Property("Group", objectbox.PropertyType_String, 5, 4706154865122290029)
	model.PropertyFlags(objectbox.PropertyFlags_INDEXED)
	model.PropertyIndex(6, 2217592893536642650)
	model.Property("Place", objectbox.PropertyType_String, 6, 1929546706668609706)
	model.PropertyFlags(objectbox.PropertyFlags_INDEX_HASH)
	model.PropertyIndex(7, 6392442863481646880)
	model.Property("Source", objectbox.PropertyType_String, 7, 3706853784096366226)
	model.PropertyFlags(objectbox.PropertyFlags_INDEX_HASH64)
	model.PropertyIndex(8, 2627038740284806767)
	model.EntityLastPropertyId(7, 3706853784096366226)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (taskIndexed_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*TaskIndexed).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (taskIndexed_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*TaskIndexed).Id = id
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (taskIndexed_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {
	obj := object.(*TaskIndexed)
	var offsetUid = fbutils.CreateStringOffset(fbb, obj.Uid)
	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)
	var offsetGroup = fbutils.CreateStringOffset(fbb, obj.Group)
	var offsetPlace = fbutils.CreateStringOffset(fbb, obj.Place)
	var offsetSource = fbutils.CreateStringOffset(fbb, obj.Source)

	// build the FlatBuffers object
	fbb.StartObject(7)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetUOffsetTSlot(fbb, 1, offsetUid)
	fbutils.SetUOffsetTSlot(fbb, 2, offsetName)
	fbutils.SetInt64Slot(fbb, 3, int64(obj.Priority))
	fbutils.SetUOffsetTSlot(fbb, 4, offsetGroup)
	fbutils.SetUOffsetTSlot(fbb, 5, offsetPlace)
	fbutils.SetUOffsetTSlot(fbb, 6, offsetSource)
}

// ToObject is called by ObjectBox to load an object from a FlatBuffer
func (taskIndexed_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &TaskIndexed{
		Id:       table.GetUint64Slot(4, 0),
		Uid:      fbutils.GetStringSlot(table, 6),
		Name:     fbutils.GetStringSlot(table, 8),
		Priority: int(table.GetUint64Slot(10, 0)),
		Group:    fbutils.GetStringSlot(table, 12),
		Place:    fbutils.GetStringSlot(table, 14),
		Source:   fbutils.GetStringSlot(table, 16),
	}
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (taskIndexed_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*TaskIndexed, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (taskIndexed_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*TaskIndexed), object.(*TaskIndexed))
}

// Box provides CRUD access to TaskIndexed objects
type TaskIndexedBox struct {
	*objectbox.Box
}

// BoxForTaskIndexed opens a box of TaskIndexed objects
func BoxForTaskIndexed(ob *objectbox.ObjectBox) *TaskIndexedBox {
	return &TaskIndexedBox{
		Box: ob.InternalBox(5),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the TaskIndexed.Id property on the passed object will be assigned the new ID as well.
func (box *TaskIndexedBox) Put(object *TaskIndexed) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the TaskIndexed.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *TaskIndexedBox) PutAsync(object *TaskIndexed) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the TaskIndexed.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the TaskIndexed.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *TaskIndexedBox) PutAll(objects []*TaskIndexed) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *TaskIndexedBox) Get(id uint64) (*TaskIndexed, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*TaskIndexed), nil
}

// Get reads all stored objects
func (box *TaskIndexedBox) GetAll() ([]*TaskIndexed, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*TaskIndexed), nil
}

// Remove deletes a single object
func (box *TaskIndexedBox) Remove(object *TaskIndexed) (err error) {
	return box.Box.Remove(object.Id)
}

// Creates a query with the given conditions. Use the fields of the TaskIndexed_ struct to create conditions.
// Keep the *TaskIndexedQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *TaskIndexedBox) Query(conditions ...objectbox.Condition) *TaskIndexedQuery {
	return &TaskIndexedQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the TaskIndexed_ struct to create conditions.
// Keep the *TaskIndexedQuery if you intend to execute the query multiple times.
func (box *TaskIndexedBox) QueryOrError(conditions ...objectbox.Condition) (*TaskIndexedQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &TaskIndexedQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all TaskIndexed which Id is either 42 or 47:
// 		box.Query(TaskIndexed_.Id.In(42, 47)).Find()
type TaskIndexedQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *TaskIndexedQuery) Find() ([]*TaskIndexed, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*TaskIndexed), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *TaskIndexedQuery) Offset(offset uint64) *TaskIndexedQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *TaskIndexedQuery) Limit(limit uint64) *TaskIndexedQuery {
	query.Query.Limit(limit)
	return query
}
