// Code generated by ObjectBox; DO NOT EDIT.

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type taskRelManyValue_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var TaskRelManyValueBinding = taskRelManyValue_EntityInfo{
	Id:  6,
	Uid: 7259475919510918339,
}

// TaskRelManyValue_ contains type-based Property helpers to facilitate some common operations such as Queries.
var TaskRelManyValue_ = struct {
	Id *objectbox.PropertyUint64
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 6,
			},
		},
	},
}

// GeneratorVersion is called by the ObjectBox to verify the compatibility of the generator used to generate this code
func (taskRelManyValue_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by the ObjectBox during model build
func (taskRelManyValue_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("TaskRelManyValue", 6, 7259475919510918339)
	model.Property("Id", objectbox.PropertyType_Long, 1, 7373105480197164748)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.EntityLastPropertyId(1, 7373105480197164748)
	model.Relation(2, 3287288577352441706, 4, 7837839688282259259)
}

// GetId is called by the ObjectBox during Put operations to check for existing ID on an object
func (taskRelManyValue_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*TaskRelManyValue).Id, nil
}

// SetId is called by the ObjectBox during Put to update an ID on an object that has just been inserted
func (taskRelManyValue_EntityInfo) SetId(object interface{}, id uint64) {
	object.(*TaskRelManyValue).Id = id
}

// PutRelated is called by the ObjectBox to put related entities before the object itself is flattened and put
func (taskRelManyValue_EntityInfo) PutRelated(obx *objectbox.ObjectBox, txn *objectbox.Transaction, object interface{}) error {
	if txn == nil {
		// TODO
		panic("putAsync is not supported with many-to-many relations at the moment")
	} else if cursor, err := txn.CursorForName("TaskRelManyValue"); err != nil {
		panic(err)
	} else if rSlice := object.(*TaskRelManyValue).Groups; rSlice != nil {
		id, err := TaskRelManyValueBinding.GetId(object)
		if err != nil {
			return err
		}

		// make a map of related target entity IDs, marking those that were originally related but should be removed
		var idsToRemove = make(map[uint64]bool)

		if id != 0 {
			if oldRelIds, err := cursor.RelationIds(2, id); err != nil {
				return err
			} else {
				for _, rId := range oldRelIds {
					idsToRemove[rId] = true
				}
			}
		}

		// walk over the current related objects, mark those that still exist, add the new ones
		for _, rel := range rSlice {
			rId, err := GroupBinding.GetId(rel)
			if err != nil {
				return err
			} else if rId == 0 && txn != nil {
				if rCursor, err := txn.CursorForName("Group"); err != nil {
					return err
				} else if rId, err = rCursor.Put(rel); err != nil {
					return err
				}
			} else if rId == 0 {
				if rId, err = BoxForGroup(obx).PutAsyncWithTimeout(rel, 0); err != nil {
					return err
				}
			}

			if idsToRemove[rId] {
				// old relation that still exists, keep it
				delete(idsToRemove, rId)
			} else {
				// new relation, add it
				if err := cursor.RelationPut(2, id, rId); err != nil {
					return err
				}
			}
		}

		// remove those that were not found in the rSlice but were originally related to this entity
		for rId := range idsToRemove {
			if err := cursor.RelationRemove(2, id, rId); err != nil {
				return err
			}
		}
	}
	return nil
}

// Flatten is called by the ObjectBox to transform an object to a FlatBuffer
func (taskRelManyValue_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {

	// build the FlatBuffers object
	fbb.StartObject(1)
	fbutils.SetUint64Slot(fbb, 0, id)
}

// Load is called by the ObjectBox to load an object from a FlatBuffer
func (taskRelManyValue_EntityInfo) Load(txn *objectbox.Transaction, bytes []byte) interface{} {
	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = table.GetUint64Slot(4, 0)

	var relGroups []Group
	if cursor, err := txn.CursorForName("TaskRelManyValue"); err != nil {
		panic(err)
	} else if rSlice, err := cursor.RelationGetAll(2, 4, id); err != nil {
		panic(err)
	} else {
		relGroups = rSlice.([]Group)
	}

	return &TaskRelManyValue{
		Id:     id,
		Groups: relGroups,
	}
}

// MakeSlice is called by the ObjectBox to construct a new slice to hold the read objects
func (taskRelManyValue_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*TaskRelManyValue, 0, capacity)
}

// AppendToSlice is called by the ObjectBox to fill the slice of the read objects
func (taskRelManyValue_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*TaskRelManyValue), object.(*TaskRelManyValue))
}

// Box provides CRUD access to TaskRelManyValue objects
type TaskRelManyValueBox struct {
	*objectbox.Box
}

// BoxForTaskRelManyValue opens a box of TaskRelManyValue objects
func BoxForTaskRelManyValue(ob *objectbox.ObjectBox) *TaskRelManyValueBox {
	return &TaskRelManyValueBox{
		Box: ob.InternalBox(6),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the TaskRelManyValue.Id property on the passed object will be assigned the new ID as well.
func (box *TaskRelManyValueBox) Put(object *TaskRelManyValue) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the TaskRelManyValue.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *TaskRelManyValueBox) PutAsync(object *TaskRelManyValue) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the TaskRelManyValue.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the TaskRelManyValue.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *TaskRelManyValueBox) PutAll(objects []*TaskRelManyValue) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *TaskRelManyValueBox) Get(id uint64) (*TaskRelManyValue, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*TaskRelManyValue), nil
}

// Get reads all stored objects
func (box *TaskRelManyValueBox) GetAll() ([]*TaskRelManyValue, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*TaskRelManyValue), nil
}

// Remove deletes a single object
func (box *TaskRelManyValueBox) Remove(object *TaskRelManyValue) (err error) {
	return box.Box.Remove(object.Id)
}

// Creates a query with the given conditions. Use the fields of the TaskRelManyValue_ struct to create conditions.
// Keep the *TaskRelManyValueQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *TaskRelManyValueBox) Query(conditions ...objectbox.Condition) *TaskRelManyValueQuery {
	return &TaskRelManyValueQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the TaskRelManyValue_ struct to create conditions.
// Keep the *TaskRelManyValueQuery if you intend to execute the query multiple times.
func (box *TaskRelManyValueBox) QueryOrError(conditions ...objectbox.Condition) (*TaskRelManyValueQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &TaskRelManyValueQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all TaskRelManyValue which Id is either 42 or 47:
// 		box.Query(TaskRelManyValue_.Id.In(42, 47)).Find()
type TaskRelManyValueQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *TaskRelManyValueQuery) Find() ([]*TaskRelManyValue, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*TaskRelManyValue), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *TaskRelManyValueQuery) Offset(offset uint64) *TaskRelManyValueQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *TaskRelManyValueQuery) Limit(limit uint64) *TaskRelManyValueQuery {
	query.Query.Limit(limit)
	return query
}
