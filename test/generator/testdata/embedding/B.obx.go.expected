// Code generated by ObjectBox; DO NOT EDIT.

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type b_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var BBinding = b_EntityInfo{
	Id:  2,
	Uid: 501233450539197794,
}

// B_ contains type-based Property helpers to facilitate some common operations such as Queries.
var B_ = struct {
	Text  *objectbox.PropertyString
	Id    *objectbox.PropertyUint64
	Value *objectbox.PropertyFloat64
	Name  *objectbox.PropertyString
}{
	Text: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 2,
			},
		},
	},
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 2,
			Entity: &objectbox.Entity{
				Id: 2,
			},
		},
	},
	Value: &objectbox.PropertyFloat64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 3,
			Entity: &objectbox.Entity{
				Id: 2,
			},
		},
	},
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 4,
			Entity: &objectbox.Entity{
				Id: 2,
			},
		},
	},
}

// GeneratorVersion is called by the ObjectBox to verify the compatibility of the generator used to generate this code
func (b_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by the ObjectBox during model build
func (b_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("B", 2, 501233450539197794)
	model.Property("Text", objectbox.PropertyType_String, 1, 3390393562759376202)
	model.Property("Id", objectbox.PropertyType_Long, 2, 2669985732393126063)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Value", objectbox.PropertyType_Double, 3, 1774932891286980153)
	model.Property("Name", objectbox.PropertyType_String, 4, 6044372234677422456)
	model.EntityLastPropertyId(4, 6044372234677422456)
}

// GetId is called by the ObjectBox during Put operations to check for existing ID on an object
func (b_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*B).Combined.Id.Id, nil
}

// SetId is called by the ObjectBox during Put to update an ID on an object that has just been inserted
func (b_EntityInfo) SetId(object interface{}, id uint64) {
	object.(*B).Combined.Id.Id = id
}

// PutRelated is called by the ObjectBox to put related entities before the object itself is flattened and put
func (b_EntityInfo) PutRelated(obx *objectbox.ObjectBox, txn *objectbox.Transaction, object interface{}) error {
	return nil
}

// Flatten is called by the ObjectBox to transform an object to a FlatBuffer
func (b_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {
	obj := object.(*B)
	var offsetText = fbutils.CreateStringOffset(fbb, obj.Text)
	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)

	// build the FlatBuffers object
	fbb.StartObject(4)
	fbutils.SetUOffsetTSlot(fbb, 0, offsetText)
	fbutils.SetUint64Slot(fbb, 1, id)
	fbutils.SetFloat64Slot(fbb, 2, obj.Value)
	fbutils.SetUOffsetTSlot(fbb, 3, offsetName)
}

// Load is called by the ObjectBox to load an object from a FlatBuffer
func (b_EntityInfo) Load(txn *objectbox.Transaction, bytes []byte) interface{} {
	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = table.GetUint64Slot(6, 0)

	return &B{
		Combined: Combined{
			Text:  fbutils.GetStringSlot(table, 4),
			Empty: Empty{},
			Id: Id{
				Id: id,
			},
			Float64Value: Float64Value{
				Value: table.GetFloat64Slot(8, 0),
			},
		},
		Name: fbutils.GetStringSlot(table, 10),
	}
}

// MakeSlice is called by the ObjectBox to construct a new slice to hold the read objects
func (b_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*B, 0, capacity)
}

// AppendToSlice is called by the ObjectBox to fill the slice of the read objects
func (b_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*B), object.(*B))
}

// Box provides CRUD access to B objects
type BBox struct {
	*objectbox.Box
}

// BoxForB opens a box of B objects
func BoxForB(ob *objectbox.ObjectBox) *BBox {
	return &BBox{
		Box: ob.InternalBox(2),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Combined.Id.Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the B.Combined.Id.Id property on the passed object will be assigned the new ID as well.
func (box *BBox) Put(object *B) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the B.Combined.Id.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *BBox) PutAsync(object *B) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Combined.Id.Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the B.Combined.Id.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the B.Combined.Id.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *BBox) PutAll(objects []*B) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *BBox) Get(id uint64) (*B, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*B), nil
}

// Get reads all stored objects
func (box *BBox) GetAll() ([]*B, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*B), nil
}

// Remove deletes a single object
func (box *BBox) Remove(object *B) (err error) {
	return box.Box.Remove(object.Combined.Id.Id)
}

// Creates a query with the given conditions. Use the fields of the B_ struct to create conditions.
// Keep the *BQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *BBox) Query(conditions ...objectbox.Condition) *BQuery {
	return &BQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the B_ struct to create conditions.
// Keep the *BQuery if you intend to execute the query multiple times.
func (box *BBox) QueryOrError(conditions ...objectbox.Condition) (*BQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &BQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all B which Id is either 42 or 47:
// 		box.Query(B_.Id.In(42, 47)).Find()
type BQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *BQuery) Find() ([]*B, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*B), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *BQuery) Offset(offset uint64) *BQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *BQuery) Limit(limit uint64) *BQuery {
	query.Query.Limit(limit)
	return query
}
