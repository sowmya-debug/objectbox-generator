// Code generated by ObjectBox; DO NOT EDIT.

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type typeful_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var TypefulBinding = typeful_EntityInfo{
	Id:  2,
	Uid: 3390393562759376202,
}

// Typeful_ contains type-based Property helpers to facilitate some common operations such as Queries.
var Typeful_ = struct {
	Id         *objectbox.PropertyUint64
	Int        *objectbox.PropertyInt
	Int8       *objectbox.PropertyInt8
	Int16      *objectbox.PropertyInt16
	Int32      *objectbox.PropertyInt32
	Int64      *objectbox.PropertyInt64
	Uint       *objectbox.PropertyUint
	Uint8      *objectbox.PropertyUint8
	Uint16     *objectbox.PropertyUint16
	Uint32     *objectbox.PropertyUint32
	Uint64     *objectbox.PropertyUint64
	Bool       *objectbox.PropertyBool
	String     *objectbox.PropertyString
	Byte       *objectbox.PropertyByte
	ByteVector *objectbox.PropertyByteVector
	Rune       *objectbox.PropertyRune
	Float32    *objectbox.PropertyFloat32
	Float64    *objectbox.PropertyFloat64
	Date       *objectbox.PropertyInt64
}{
	Id: &objectbox.PropertyUint64{
		Property: &objectbox.Property{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Int: &objectbox.PropertyInt{
		Property: &objectbox.Property{
			Id: 2,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Int8: &objectbox.PropertyInt8{
		Property: &objectbox.Property{
			Id: 3,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Int16: &objectbox.PropertyInt16{
		Property: &objectbox.Property{
			Id: 4,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Int32: &objectbox.PropertyInt32{
		Property: &objectbox.Property{
			Id: 5,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Int64: &objectbox.PropertyInt64{
		Property: &objectbox.Property{
			Id: 6,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Uint: &objectbox.PropertyUint{
		Property: &objectbox.Property{
			Id: 7,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Uint8: &objectbox.PropertyUint8{
		Property: &objectbox.Property{
			Id: 8,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Uint16: &objectbox.PropertyUint16{
		Property: &objectbox.Property{
			Id: 9,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Uint32: &objectbox.PropertyUint32{
		Property: &objectbox.Property{
			Id: 10,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Uint64: &objectbox.PropertyUint64{
		Property: &objectbox.Property{
			Id: 11,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Bool: &objectbox.PropertyBool{
		Property: &objectbox.Property{
			Id: 12,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	String: &objectbox.PropertyString{
		Property: &objectbox.Property{
			Id: 13,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Byte: &objectbox.PropertyByte{
		Property: &objectbox.Property{
			Id: 14,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	ByteVector: &objectbox.PropertyByteVector{
		Property: &objectbox.Property{
			Id: 15,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Rune: &objectbox.PropertyRune{
		Property: &objectbox.Property{
			Id: 16,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Float32: &objectbox.PropertyFloat32{
		Property: &objectbox.Property{
			Id: 17,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Float64: &objectbox.PropertyFloat64{
		Property: &objectbox.Property{
			Id: 18,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Date: &objectbox.PropertyInt64{
		Property: &objectbox.Property{
			Id: 19,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
}

// GeneratorVersion is called by the ObjectBox to verify the compatibility of the generator used to generate this code
func (typeful_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by the ObjectBox during model build
func (typeful_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Typeful", 2, 3390393562759376202)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2669985732393126063)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Int", objectbox.PropertyType_Long, 2, 1774932891286980153)
	model.Property("Int8", objectbox.PropertyType_Byte, 3, 6044372234677422456)
	model.Property("Int16", objectbox.PropertyType_Short, 4, 8274930044578894929)
	model.Property("Int32", objectbox.PropertyType_Int, 5, 1543572285742637646)
	model.Property("Int64", objectbox.PropertyType_Long, 6, 2661732831099943416)
	model.Property("Uint", objectbox.PropertyType_Long, 7, 8325060299420976708)
	model.Property("Uint8", objectbox.PropertyType_Byte, 8, 7837839688282259259)
	model.Property("Uint16", objectbox.PropertyType_Short, 9, 2518412263346885298)
	model.Property("Uint32", objectbox.PropertyType_Int, 10, 5617773211005988520)
	model.Property("Uint64", objectbox.PropertyType_Long, 11, 2339563716805116249)
	model.Property("Bool", objectbox.PropertyType_Bool, 12, 7144924247938981575)
	model.Property("String", objectbox.PropertyType_String, 13, 161231572858529631)
	model.Property("Byte", objectbox.PropertyType_Byte, 14, 7259475919510918339)
	model.Property("ByteVector", objectbox.PropertyType_ByteVector, 15, 7373105480197164748)
	model.Property("Rune", objectbox.PropertyType_Int, 16, 3287288577352441706)
	model.Property("Float32", objectbox.PropertyType_Float, 17, 3930927879439176946)
	model.Property("Float64", objectbox.PropertyType_Double, 18, 4706154865122290029)
	model.Property("Date", objectbox.PropertyType_Date, 19, 2217592893536642650)
	model.EntityLastPropertyId(19, 2217592893536642650)
}

// GetId is called by the ObjectBox during Put operations to check for existing ID on an object
func (typeful_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*Typeful).Id, nil
}

// SetId is called by the ObjectBox during Put to update an ID on an object that has just been inserted
func (typeful_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*Typeful).Id = id
	return nil
}

// Flatten is called by the ObjectBox to transform an object to a FlatBuffer
func (typeful_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {
	obj := object.(*Typeful)
	var offsetString = fbutils.CreateStringOffset(fbb, obj.String)
	var offsetByteVector = fbutils.CreateByteVectorOffset(fbb, obj.ByteVector)

	// build the FlatBuffers object
	fbb.StartObject(19)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetInt64Slot(fbb, 1, int64(obj.Int))
	fbutils.SetInt8Slot(fbb, 2, obj.Int8)
	fbutils.SetInt16Slot(fbb, 3, obj.Int16)
	fbutils.SetInt32Slot(fbb, 4, obj.Int32)
	fbutils.SetInt64Slot(fbb, 5, obj.Int64)
	fbutils.SetUint64Slot(fbb, 6, uint64(obj.Uint))
	fbutils.SetUint8Slot(fbb, 7, obj.Uint8)
	fbutils.SetUint16Slot(fbb, 8, obj.Uint16)
	fbutils.SetUint32Slot(fbb, 9, obj.Uint32)
	fbutils.SetUint64Slot(fbb, 10, obj.Uint64)
	fbutils.SetBoolSlot(fbb, 11, obj.Bool)
	fbutils.SetUOffsetTSlot(fbb, 12, offsetString)
	fbutils.SetByteSlot(fbb, 13, obj.Byte)
	fbutils.SetUOffsetTSlot(fbb, 14, offsetByteVector)
	fbutils.SetInt32Slot(fbb, 15, obj.Rune)
	fbutils.SetFloat32Slot(fbb, 16, obj.Float32)
	fbutils.SetFloat64Slot(fbb, 17, obj.Float64)
	fbutils.SetInt64Slot(fbb, 18, obj.Date)
}

// ToObject is called by the ObjectBox to load an object from a FlatBuffer
func (typeful_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &Typeful{
		Id:         table.GetUint64Slot(4, 0),
		Int:        int(table.GetUint64Slot(6, 0)),
		Int8:       table.GetInt8Slot(8, 0),
		Int16:      table.GetInt16Slot(10, 0),
		Int32:      table.GetInt32Slot(12, 0),
		Int64:      table.GetInt64Slot(14, 0),
		Uint:       uint(table.GetUint64Slot(16, 0)),
		Uint8:      table.GetUint8Slot(18, 0),
		Uint16:     table.GetUint16Slot(20, 0),
		Uint32:     table.GetUint32Slot(22, 0),
		Uint64:     table.GetUint64Slot(24, 0),
		Bool:       table.GetBoolSlot(26, false),
		String:     fbutils.GetStringSlot(table, 28),
		Byte:       table.GetByteSlot(30, 0),
		ByteVector: fbutils.GetByteVectorSlot(table, 32),
		Rune:       rune(table.GetInt32Slot(34, 0)),
		Float32:    table.GetFloat32Slot(36, 0),
		Float64:    table.GetFloat64Slot(38, 0),
		Date:       table.GetInt64Slot(40, 0),
	}
}

// MakeSlice is called by the ObjectBox to construct a new slice to hold the read objects
func (typeful_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*Typeful, 0, capacity)
}

// AppendToSlice is called by the ObjectBox to fill the slice of the read objects
func (typeful_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*Typeful), object.(*Typeful))
}

// Box provides CRUD access to Typeful objects
type TypefulBox struct {
	*objectbox.Box
}

// BoxForTypeful opens a box of Typeful objects
func BoxForTypeful(ob *objectbox.ObjectBox) *TypefulBox {
	return &TypefulBox{
		Box: ob.InternalBox(2),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Typeful.Id property on the passed object will be assigned the new ID as well.
func (box *TypefulBox) Put(object *Typeful) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the Typeful.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *TypefulBox) PutAsync(object *Typeful) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the Typeful.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the Typeful.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *TypefulBox) PutAll(objects []*Typeful) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *TypefulBox) Get(id uint64) (*Typeful, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Typeful), nil
}

// Get reads all stored objects
func (box *TypefulBox) GetAll() ([]*Typeful, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*Typeful), nil
}

// Remove deletes a single object
func (box *TypefulBox) Remove(object *Typeful) (err error) {
	return box.Box.Remove(object.Id)
}

// Creates a query with the given conditions. Use the fields of the Typeful_ struct to create conditions.
// Keep the *TypefulQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *TypefulBox) Query(conditions ...objectbox.Condition) *TypefulQuery {
	return &TypefulQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the Typeful_ struct to create conditions.
// Keep the *TypefulQuery if you intend to execute the query multiple times.
func (box *TypefulBox) QueryOrError(conditions ...objectbox.Condition) (*TypefulQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &TypefulQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all Typeful which Id is either 42 or 47:
// 		box.Query(Typeful_.Id.In(42, 47)).Find()
type TypefulQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *TypefulQuery) Find() ([]*Typeful, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*Typeful), nil
}
