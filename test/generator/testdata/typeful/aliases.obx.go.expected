// Code generated by ObjectBox; DO NOT EDIT.

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type aliases_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var AliasesBinding = aliases_EntityInfo{
	Id:  1,
	Uid: 8717895732742165505,
}

// Aliases_ contains type-based Property helpers to facilitate some common operations such as Queries.
var Aliases_ = struct {
	Id            *objectbox.PropertyUint64
	SameFile      *objectbox.PropertyString
	SamePackage   *objectbox.PropertyInt
	SameFile2     *objectbox.PropertyString
	SamePackage2  *objectbox.PropertyInt
	OtherPackage  *objectbox.PropertyString
	OtherPackage2 *objectbox.PropertyString
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	SameFile: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 2,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	SamePackage: &objectbox.PropertyInt{
		BaseProperty: &objectbox.BaseProperty{
			Id: 3,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	SameFile2: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 4,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	SamePackage2: &objectbox.PropertyInt{
		BaseProperty: &objectbox.BaseProperty{
			Id: 5,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	OtherPackage: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 6,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	OtherPackage2: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 7,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (aliases_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by ObjectBox during model build
func (aliases_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Aliases", 1, 8717895732742165505)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2259404117704393152)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("SameFile", objectbox.PropertyType_String, 2, 6050128673802995827)
	model.Property("SamePackage", objectbox.PropertyType_Long, 3, 501233450539197794)
	model.Property("SameFile2", objectbox.PropertyType_String, 4, 3390393562759376202)
	model.Property("SamePackage2", objectbox.PropertyType_Long, 5, 2669985732393126063)
	model.Property("OtherPackage", objectbox.PropertyType_String, 6, 1774932891286980153)
	model.Property("OtherPackage2", objectbox.PropertyType_String, 7, 6044372234677422456)
	model.EntityLastPropertyId(7, 6044372234677422456)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (aliases_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*Aliases).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (aliases_EntityInfo) SetId(object interface{}, id uint64) {
	object.(*Aliases).Id = id
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (aliases_EntityInfo) PutRelated(txn *objectbox.Transaction, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (aliases_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {
	obj := object.(*Aliases)
	var offsetSameFile = fbutils.CreateStringOffset(fbb, obj.SameFile)
	var offsetSameFile2 = fbutils.CreateStringOffset(fbb, string(obj.SameFile2))
	var offsetOtherPackage = fbutils.CreateStringOffset(fbb, obj.OtherPackage)
	var offsetOtherPackage2 = fbutils.CreateStringOffset(fbb, string(obj.OtherPackage2))

	// build the FlatBuffers object
	fbb.StartObject(7)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetUOffsetTSlot(fbb, 1, offsetSameFile)
	fbutils.SetInt64Slot(fbb, 2, int64(obj.SamePackage))
	fbutils.SetUOffsetTSlot(fbb, 3, offsetSameFile2)
	fbutils.SetInt64Slot(fbb, 4, int64(int(obj.SamePackage2)))
	fbutils.SetUOffsetTSlot(fbb, 5, offsetOtherPackage)
	fbutils.SetUOffsetTSlot(fbb, 6, offsetOtherPackage2)
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (aliases_EntityInfo) Load(txn *objectbox.Transaction, bytes []byte) (interface{}, error) {
	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = table.GetUint64Slot(4, 0)

	return &Aliases{
		Id:            id,
		SameFile:      fbutils.GetStringSlot(table, 6),
		SamePackage:   int(table.GetUint64Slot(8, 0)),
		SameFile2:     sameFileNamed(fbutils.GetStringSlot(table, 10)),
		SamePackage2:  samePackageNamed(int(table.GetUint64Slot(12, 0))),
		OtherPackage:  fbutils.GetStringSlot(table, 14),
		OtherPackage2: other.ForeignNamed(fbutils.GetStringSlot(table, 16)),
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (aliases_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*Aliases, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (aliases_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*Aliases), object.(*Aliases))
}

// Box provides CRUD access to Aliases objects
type AliasesBox struct {
	*objectbox.Box
}

// BoxForAliases opens a box of Aliases objects
func BoxForAliases(ob *objectbox.ObjectBox) *AliasesBox {
	return &AliasesBox{
		Box: ob.InternalBox(1),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Aliases.Id property on the passed object will be assigned the new ID as well.
func (box *AliasesBox) Put(object *Aliases) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the Aliases.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *AliasesBox) PutAsync(object *Aliases) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the Aliases.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the Aliases.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *AliasesBox) PutAll(objects []*Aliases) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *AliasesBox) Get(id uint64) (*Aliases, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Aliases), nil
}

// Get reads all stored objects
func (box *AliasesBox) GetAll() ([]*Aliases, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*Aliases), nil
}

// Remove deletes a single object
func (box *AliasesBox) Remove(object *Aliases) (err error) {
	return box.Box.Remove(object.Id)
}

// Creates a query with the given conditions. Use the fields of the Aliases_ struct to create conditions.
// Keep the *AliasesQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *AliasesBox) Query(conditions ...objectbox.Condition) *AliasesQuery {
	return &AliasesQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the Aliases_ struct to create conditions.
// Keep the *AliasesQuery if you intend to execute the query multiple times.
func (box *AliasesBox) QueryOrError(conditions ...objectbox.Condition) (*AliasesQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &AliasesQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all Aliases which Id is either 42 or 47:
// 		box.Query(Aliases_.Id.In(42, 47)).Find()
type AliasesQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *AliasesQuery) Find() ([]*Aliases, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*Aliases), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *AliasesQuery) Offset(offset uint64) *AliasesQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *AliasesQuery) Limit(limit uint64) *AliasesQuery {
	query.Query.Limit(limit)
	return query
}
