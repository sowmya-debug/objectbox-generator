// Code generated by ObjectBox; DO NOT EDIT.

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
)

type a_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var ABinding = a_EntityInfo{
	Id:  1,
	Uid: 8717895732742165505,
}

var A_ = struct {
	Id *objectbox.PropertyUint64
}{
	Id: &objectbox.PropertyUint64{
		Property: &objectbox.Property{
			Id: 1,
		},
	},
}

func (a_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("A", 1, 8717895732742165505)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2259404117704393152)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.EntityLastPropertyId(1, 2259404117704393152)
}

func (a_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*A).Id, nil
}

func (a_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*A).Id = id
	return nil
}

func (a_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {

	// build the FlatBuffers object
	fbb.StartObject(1)
	fbutils.SetUint64Slot(fbb, 0, id)
}

func (a_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &A{
		Id: table.GetUint64Slot(4, 0),
	}
}

func (a_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*A, 0, capacity)
}

func (a_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*A), object.(*A))
}

type ABox struct {
	*objectbox.Box
}

func BoxForA(ob *objectbox.ObjectBox) *ABox {
	return &ABox{
		Box: ob.InternalBox(1),
	}
}

func (box *ABox) Put(object *A) (uint64, error) {
	return box.Box.Put(object)
}

func (box *ABox) PutAsync(object *A) (uint64, error) {
	return box.Box.PutAsync(object)
}

func (box *ABox) PutAll(objects []*A) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

func (box *ABox) Get(id uint64) (*A, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*A), nil
}

func (box *ABox) GetAll() ([]*A, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*A), nil
}

func (box *ABox) Remove(object *A) (err error) {
	return box.Box.Remove(object.Id)
}

func (box *ABox) Query(conditions ...objectbox.Condition) *AQuery {
	return &AQuery{
		box.Box.Query(conditions...),
	}
}

type AQuery struct {
	*objectbox.Query
}

func (query *AQuery) Find() ([]*A, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*A), nil
}
