// Code generated by ObjectBox; DO NOT EDIT.

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
)

type b_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var BBinding = b_EntityInfo{
	Id:  2,
	Uid: 501233450539197794,
}

var B_ = struct {
	Id  objectbox.TypeId
	New objectbox.TypeId
}{
	Id:  1,
	New: 3,
}

func (b_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("B", 2, 501233450539197794)
	model.Property("Id", objectbox.PropertyType_Long, 1, 3390393562759376202)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("New", objectbox.PropertyType_Int, 3, 1774932891286980153)
	model.EntityLastPropertyId(3, 1774932891286980153)
}

func (b_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*B).Id, nil
}

func (b_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*B).Id = id
	return nil
}

func (b_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {
	obj := object.(*B)

	// build the FlatBuffers object
	fbb.StartObject(3)
	fbb.PrependUint64Slot(0, id, 0)
	fbb.PrependInt32Slot(2, int32(obj.New), 0)
}

func (b_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &B{
		Id:  table.GetUint64Slot(4, 0),
		New: int(table.GetUint32Slot(8, 0)),
	}
}

func (b_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*B, 0, capacity)
}

func (b_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*B), object.(*B))
}

type BBox struct {
	*objectbox.Box
}

func BoxForB(ob *objectbox.ObjectBox) *BBox {
	return &BBox{
		Box: ob.Box(2),
	}
}

func (box *BBox) Put(object *B) (uint64, error) {
	return box.Box.Put(object)
}

func (box *BBox) PutAsync(object *B) (uint64, error) {
	return box.Box.PutAsync(object)
}

func (box *BBox) PutAll(objects []*B) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

func (box *BBox) Get(id uint64) (*B, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*B), nil
}

func (box *BBox) GetAll() ([]*B, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*B), nil
}

func (box *BBox) Remove(object *B) (err error) {
	return box.Box.Remove(object.Id)
}
