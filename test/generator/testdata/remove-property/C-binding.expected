// This file was automatically generated by ObjectBox, do not modify

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
)

type c_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var CBinding = c_EntityInfo{
	Id:  3,
	Uid: 6044372234677422456,
}

var C_ = struct {
	Id  uint32
	New uint32
}{
	Id:  1,
	New: 3,
}

func (c_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("C", 3, 6044372234677422456)
	model.Property("Id", objectbox.PropertyType_Long, 1, 8274930044578894929)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("New", objectbox.PropertyType_Int, 3, 2661732831099943416)
	model.EntityLastPropertyId(3, 2661732831099943416)
}

func (c_EntityInfo) GetId(entity interface{}) (uint64, error) {
	return entity.(*C).Id, nil
}

func (c_EntityInfo) Flatten(entity interface{}, fbb *flatbuffers.Builder, id uint64) {
	ent := entity.(*C)

	// build the FlatBuffers object
	fbb.StartObject(3)
	fbb.PrependUint64Slot(0, id, 0)
	fbb.PrependInt32Slot(2, int32(ent.New), 0)
}

func (c_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &C{
		Id:  table.GetUint64Slot(4, 0),
		New: int(table.GetUint32Slot(8, 0)),
	}
}

func (c_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*C, 0, capacity)
}

func (c_EntityInfo) AppendToSlice(slice interface{}, entity interface{}) interface{} {
	return append(slice.([]*C), entity.(*C))
}

type CBox struct {
	*objectbox.Box
}

func BoxForC(ob *objectbox.ObjectBox) *CBox {
	return &CBox{
		Box: ob.Box(3),
	}
}

func (box *CBox) Get(id uint64) (*C, error) {
	entity, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if entity == nil {
		return nil, nil
	}
	return entity.(*C), nil
}

func (box *CBox) GetAll() ([]*C, error) {
	entities, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return entities.([]*C), nil
}

func (box *CBox) Remove(entity *C) (err error) {
	return box.Box.Remove(entity.Id)
}
