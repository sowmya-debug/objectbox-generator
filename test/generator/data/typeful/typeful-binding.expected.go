// automatically generated by the ObjectBox, do not modify

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type TypefulBinding struct {
}

func (TypefulBinding) AddToModel(model *objectbox.Model) {
	model.Entity("Typeful", 1, 8717895732742165505)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2259404117704393152)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Int", objectbox.PropertyType_Int, 2, 6050128673802995827)
	model.Property("Int8", objectbox.PropertyType_Short, 3, 501233450539197794)
	model.Property("Int16", objectbox.PropertyType_Short, 4, 3390393562759376202)
	model.Property("Int32", objectbox.PropertyType_Int, 5, 2669985732393126063)
	model.Property("Int64", objectbox.PropertyType_Long, 6, 1774932891286980153)
	model.Property("Uint", objectbox.PropertyType_Int, 7, 6044372234677422456)
	model.Property("Uint8", objectbox.PropertyType_Short, 8, 8274930044578894929)
	model.Property("Uint16", objectbox.PropertyType_Short, 9, 1543572285742637646)
	model.Property("Uint32", objectbox.PropertyType_Int, 10, 2661732831099943416)
	model.Property("Uint64", objectbox.PropertyType_Long, 11, 8325060299420976708)
	model.Property("Bool", objectbox.PropertyType_Bool, 12, 7837839688282259259)
	model.Property("String", objectbox.PropertyType_String, 13, 2518412263346885298)
	model.Property("Byte", objectbox.PropertyType_Byte, 14, 5617773211005988520)
	model.Property("ByteVector", objectbox.PropertyType_ByteVector, 15, 2339563716805116249)
	model.Property("Rune", objectbox.PropertyType_Int, 16, 7144924247938981575)
	model.Property("Float32", objectbox.PropertyType_Float, 17, 161231572858529631)
	model.Property("Float64", objectbox.PropertyType_Double, 18, 7259475919510918339)
	model.Property("Date", objectbox.PropertyType_Date, 19, 7373105480197164748)
	model.EntityLastPropertyId(19, 7373105480197164748)
}

func asTypeful(entity interface{}) (*Typeful, error) {
	ent, ok := entity.(*Typeful)
	if !ok {
		// Programming error, OK to panic
		// TODO don't panic here, handle in the caller if necessary to panic
		panic("Object has wrong type, expecting 'Typeful'")
	}
	return ent, nil
}

func asTypefuls(entities interface{}) ([]Typeful, error) {
	ent, ok := entities.([]Typeful)
	if !ok {
		// Programming error, OK to panic
		// TODO don't panic here, handle in the caller if necessary to panic
		panic("Object has wrong type, expecting 'Typeful'")
	}
	return ent, nil
}

func (TypefulBinding) GetId(entity interface{}) (uint64, error) {
	if ent, err := asTypeful(entity); err != nil {
		return 0, err
	} else {
		return ent.Id, nil
	}
}

func (TypefulBinding) Flatten(entity interface{}, fbb *flatbuffers.Builder, id uint64) {
	ent, err := asTypeful(entity)
	if err != nil {
		// TODO return error and panic in the caller if really, really necessary
		panic(err)
	}

	// prepare the "offset" properties
	var offsetString = fbutils.CreateStringOffset(fbb, ent.String)
	var offsetByteVector = fbutils.CreateByteVectorOffset(fbb, ent.ByteVector)

	// build the FlatBuffers object
	fbb.StartObject(19)
	fbb.PrependUint64Slot(0, id, 0)
	fbb.PrependInt32Slot(1, int32(ent.Int), 0)
	fbb.PrependInt8Slot(2, ent.Int8, 0)
	fbb.PrependInt16Slot(3, ent.Int16, 0)
	fbb.PrependInt32Slot(4, ent.Int32, 0)
	fbb.PrependInt64Slot(5, ent.Int64, 0)
	fbb.PrependUint32Slot(6, uint32(ent.Uint), 0)
	fbb.PrependUint8Slot(7, ent.Uint8, 0)
	fbb.PrependUint16Slot(8, ent.Uint16, 0)
	fbb.PrependUint32Slot(9, ent.Uint32, 0)
	fbb.PrependUint64Slot(10, ent.Uint64, 0)
	fbb.PrependBoolSlot(11, ent.Bool, false)
	fbb.PrependUOffsetTSlot(12, offsetString, 0)
	fbb.PrependByteSlot(13, ent.Byte, 0)
	fbb.PrependUOffsetTSlot(14, offsetByteVector, 0)
	fbb.PrependInt32Slot(15, ent.Rune, 0)
	fbb.PrependFloat32Slot(16, ent.Float32, 0)
	fbb.PrependFloat64Slot(17, ent.Float64, 0)
	fbb.PrependUint64Slot(18, ent.Date, 0)
}

func (TypefulBinding) ToObject(bytes []byte) interface{} {
	table := fbutils.GetRootAsTable(bytes, flatbuffers.UOffsetT(0))

	return &Typeful{
		Id:         table.OffsetAsUint64(6),
		Int:        table.OffsetAsInt(8),
		Int8:       table.OffsetAsInt8(10),
		Int16:      table.OffsetAsInt16(12),
		Int32:      table.OffsetAsInt32(14),
		Int64:      table.OffsetAsInt64(16),
		Uint:       table.OffsetAsUint(18),
		Uint8:      table.OffsetAsUint8(20),
		Uint16:     table.OffsetAsUint16(22),
		Uint32:     table.OffsetAsUint32(24),
		Uint64:     table.OffsetAsUint64(26),
		Bool:       table.OffsetAsBool(28),
		String:     table.OffsetAsString(30),
		Byte:       table.OffsetAsByte(32),
		ByteVector: table.OffsetAsByteVector(34),
		Rune:       table.OffsetAsRune(36),
		Float32:    table.OffsetAsFloat32(38),
		Float64:    table.OffsetAsFloat64(40),
		Date:       table.OffsetAsUint64(42),
	}
}

func (TypefulBinding) MakeSlice(capacity int) interface{} {
	return make([]Typeful, 0, capacity)
}

func (TypefulBinding) AppendToSlice(slice interface{}, entity interface{}) interface{} {
	return append(slice.([]Typeful), *entity.(*Typeful))
}

type TypefulBox struct {
	*objectbox.Box
}

func BoxForTypeful(ob *objectbox.ObjectBox) *TypefulBox {
	return &TypefulBox{
		Box: ob.Box(1),
	}
}

func (box *TypefulBox) Get(id uint64) (*Typeful, error) {
	entity, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	}
	return asTypeful(entity)
}

func (box *TypefulBox) GetAll() ([]Typeful, error) {
	entities, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return asTypefuls(entities)
}

// TODO
// func (box *TypefulBox) Remove(entity *Typeful) (err error) {
// 	   return box.Box.Remove(entity.Id)
// }
