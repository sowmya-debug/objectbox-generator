// This file was automatically generated by ObjectBox, do not modify

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type TaskBinding struct {
}

func (TaskBinding) AddToModel(model *objectbox.Model) {
	model.Entity("Task", 1, 8717895732742165505)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2259404117704393152)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Uid", objectbox.PropertyType_String, 2, 6050128673802995827)
	model.PropertyFlags(objectbox.PropertyFlags_INDEXED)
	model.Property("Name", objectbox.PropertyType_String, 3, 501233450539197794)
	model.Property("Place", objectbox.PropertyType_String, 4, 3390393562759376202)
	model.PropertyFlags(objectbox.PropertyFlags_INDEXED | objectbox.PropertyFlags_INDEX_HASH)
	model.Property("Source", objectbox.PropertyType_String, 5, 2669985732393126063)
	model.PropertyFlags(objectbox.PropertyFlags_INDEXED | objectbox.PropertyFlags_INDEX_HASH64)
	model.Property("text", objectbox.PropertyType_String, 6, 1774932891286980153)
	model.Property("Date", objectbox.PropertyType_Date, 7, 6044372234677422456)
	model.EntityLastPropertyId(7, 6044372234677422456)
}

func asTask(entity interface{}) (*Task, error) {
	ent, ok := entity.(*Task)
	if !ok {
		// Programming error, OK to panic
		// TODO don't panic here, handle in the caller if necessary to panic
		panic("Object has wrong type, expecting 'Task'")
	}
	return ent, nil
}

func asTasks(entities interface{}) ([]*Task, error) {
	ent, ok := entities.([]*Task)
	if !ok {
		// Programming error, OK to panic
		// TODO don't panic here, handle in the caller if necessary to panic
		panic("Object has wrong type, expecting 'Task'")
	}
	return ent, nil
}

func (TaskBinding) GetId(entity interface{}) (uint64, error) {
	if ent, err := asTask(entity); err != nil {
		return 0, err
	} else {
		return ent.Id, nil
	}
}

func (TaskBinding) Flatten(entity interface{}, fbb *flatbuffers.Builder, id uint64) {
	ent, err := asTask(entity)
	if err != nil {
		// TODO return error and panic in the caller if really, really necessary
		panic(err)
	}

	// prepare the "offset" properties
	var offsetUid = fbutils.CreateStringOffset(fbb, ent.Uid)
	var offsetName = fbutils.CreateStringOffset(fbb, ent.Name)
	var offsetPlace = fbutils.CreateStringOffset(fbb, ent.Place)
	var offsetSource = fbutils.CreateStringOffset(fbb, ent.Source)
	var offsetText = fbutils.CreateStringOffset(fbb, ent.Text)

	// build the FlatBuffers object
	fbb.StartObject(7)
	fbb.PrependUint64Slot(0, id, 0)
	fbb.PrependUOffsetTSlot(1, offsetUid, 0)
	fbb.PrependUOffsetTSlot(2, offsetName, 0)
	fbb.PrependUOffsetTSlot(3, offsetPlace, 0)
	fbb.PrependUOffsetTSlot(4, offsetSource, 0)
	fbb.PrependUOffsetTSlot(5, offsetText, 0)
	fbb.PrependUint64Slot(6, ent.Date, 0)
}

func (TaskBinding) ToObject(bytes []byte) interface{} {
	table := fbutils.GetRootAsTable(bytes, flatbuffers.UOffsetT(0))

	return &Task{
		Id:     table.OffsetAsUint64(4),
		Uid:    table.OffsetAsString(6),
		Name:   table.OffsetAsString(8),
		Place:  table.OffsetAsString(10),
		Source: table.OffsetAsString(12),
		Text:   table.OffsetAsString(14),
		Date:   table.OffsetAsUint64(16),
	}
}

func (TaskBinding) MakeSlice(capacity int) interface{} {
	return make([]*Task, 0, capacity)
}

func (TaskBinding) AppendToSlice(slice interface{}, entity interface{}) interface{} {
	return append(slice.([]*Task), entity.(*Task))
}

type TaskBox struct {
	*objectbox.Box
}

func BoxForTask(ob *objectbox.ObjectBox) *TaskBox {
	return &TaskBox{
		Box: ob.Box(1),
	}
}

func (box *TaskBox) Get(id uint64) (*Task, error) {
	entity, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if entity == nil {
		return nil, nil
	}
	return asTask(entity)
}

func (box *TaskBox) GetAll() ([]*Task, error) {
	entities, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return asTasks(entities)
}

func (box *TaskBox) Remove(entity *Task) (err error) {
	return box.Box.Remove(entity.Id)
}
