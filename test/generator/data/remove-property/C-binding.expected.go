// This file was automatically generated by ObjectBox, do not modify

package object

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type CBinding struct {
}

func (CBinding) AddToModel(model *objectbox.Model) {
	model.Entity("C", 3, 6044372234677422456)
	model.Property("Id", objectbox.PropertyType_Long, 1, 8274930044578894929)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("New", objectbox.PropertyType_Int, 3, 2661732831099943416)
	model.EntityLastPropertyId(3, 2661732831099943416)
}

func asC(entity interface{}) (*C, error) {
	ent, ok := entity.(*C)
	if !ok {
		// Programming error, OK to panic
		// TODO don't panic here, handle in the caller if necessary to panic
		panic("Object has wrong type, expecting 'C'")
	}
	return ent, nil
}

func asCs(entities interface{}) ([]*C, error) {
	ent, ok := entities.([]*C)
	if !ok {
		// Programming error, OK to panic
		// TODO don't panic here, handle in the caller if necessary to panic
		panic("Object has wrong type, expecting 'C'")
	}
	return ent, nil
}

func (CBinding) GetId(entity interface{}) (uint64, error) {
	if ent, err := asC(entity); err != nil {
		return 0, err
	} else {
		return ent.Id, nil
	}
}

func (CBinding) Flatten(entity interface{}, fbb *flatbuffers.Builder, id uint64) {
	ent, err := asC(entity)
	if err != nil {
		// TODO return error and panic in the caller if really, really necessary
		panic(err)
	}

	// prepare the "offset" properties

	// build the FlatBuffers object
	fbb.StartObject(2)
	fbb.PrependUint64Slot(0, id, 0)
	fbb.PrependInt32Slot(2, int32(ent.New), 0)
}

func (CBinding) ToObject(bytes []byte) interface{} {
	table := fbutils.GetRootAsTable(bytes, flatbuffers.UOffsetT(0))

	return &C{
		Id:  table.OffsetAsUint64(4),
		New: table.OffsetAsInt(8),
	}
}

func (CBinding) MakeSlice(capacity int) interface{} {
	return make([]*C, 0, capacity)
}

func (CBinding) AppendToSlice(slice interface{}, entity interface{}) interface{} {
	return append(slice.([]*C), entity.(*C))
}

type CBox struct {
	*objectbox.Box
}

func BoxForC(ob *objectbox.ObjectBox) *CBox {
	return &CBox{
		Box: ob.Box(3),
	}
}

func (box *CBox) Get(id uint64) (*C, error) {
	entity, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if entity == nil {
		return nil, nil
	}
	return asC(entity)
}

func (box *CBox) GetAll() ([]*C, error) {
	entities, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return asCs(entities)
}

func (box *CBox) Remove(entity *C) (err error) {
	return box.Box.Remove(entity.Id)
}
